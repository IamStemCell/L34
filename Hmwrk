Task 1

A shared counter

Make a class called Counter, and make it a subclass of the Thread class in the Threading module. Make the class have two global variables, one called counter set to 0, and another called rounds set to 100.000. Now implement the run() method, let it include a simple for-loop that iterates through rounds (e.i. 100.000 times) and for each time increments the value of the counter by 1. Create 2 instances of the thread and start them, then join them and check the result of the counter, it should be 200.000, right? Run it a couple of times and consider some different reasons why you get the answer that you get. 

 

Task 2

Echo server with threading

Create a socket echo server which handles each connection in a separate Thread
import socket
import threading

# Function to handle each client connection
def handle_client(client_socket):
    while True:
        # Receive data from the client
        data = client_socket.recv(1024)
        if not data:
            break
        # Echo the received data back to the client
        client_socket.sendall(data)
    # Close the client socket
    client_socket.close()

# Create a socket object
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Bind the socket to a specific address and port
server_address = ('localhost', 8000)
server_socket.bind(server_address)

# Start listening for incoming connections
server_socket.listen(5)
print('Server is listening on {}:{}'.format(*server_address))

while True:
    # Wait for a client connection
    client_socket, client_address = server_socket.accept()
    print('New connection from {}:{}'.format(*client_address))

    # Create a new thread to handle the client connection
    client_thread = threading.Thread(target=handle_client, args=(client_socket,))
    client_thread.start()

 
 

Task 3

Requests using multiprocessing

Download all comments from a subreddit of your choice using URL: https://api.pushshift.io/reddit/comment/search/ . 

As a result, store all comments in chronological order in JSON and dump it to a file. For this task use Threads for making requests to reddit API
